var i=(o,s)=>()=>(s||o((s={exports:{}}).exports,s),s.exports);var p=i((k,q)=>{var{Sequelize:D}=require("sequelize"),_=new D(process.env.DB_NAME,process.env.DB_USER,process.env.DB_PASS,{dialect:"mysql",host:process.env.DB_HOST,port:process.env.DB_PORT});q.exports=_});var g=i((C,N)=>{var{Sequelize:c}=require("sequelize"),w=p(),b=w.define("employee",{id:{type:c.INTEGER,autoIncrement:!0,allowNull:!1,primaryKey:!0},firstName:{type:c.STRING,allowNull:!1},lastName:{type:c.STRING,allowNull:!1},email:{type:c.STRING,allowNull:!1}});N.exports=b});var E=i((H,S)=>{var h=require("multer"),v=require("path"),x=require("fs-extra"),M=h.diskStorage({destination:function(o,s,e){e(null,v.join("uploads"))},filename:function(o,s,e){let r=s.originalname.split(" ").join("_");e(null,`${Date.now()}_${r}`)}}),z=h({storage:M,limits:{fileSize:9e6},fileFilter(o,s,e){s.originalname.match(/.csv$/i)||(x.emptyDirSync(v.join("uploads")),e(new Error("File type not allowed."))),e(null,!0)}}),O=z.single("csvFile");S.exports=O});var T=i((K,R)=>{var a=require("express").Router(),u=require("fs-extra"),m=require("path"),U=require("fast-csv"),A=require("validator"),I=require("nodemailer"),d=g(),B=E();a.get("/",async(o,s)=>{try{let e=await d.findAll();s.send(e)}catch(e){s.send(e)}});a.post("/",async(o,s)=>{try{let{firstName:e,lastName:r,email:t}=o.body,n=await d.create({firstName:e,lastName:r,email:t});s.send(n)}catch(e){console.log(e)}});a.post("/api/upload",B,async(o,s)=>{try{let e=[],r=U.parse({ignoreEmpty:!0,discardUnmappedColumns:!0,headers:["firstName","lastName","email"]});u.createReadStream(m.join("uploads",o.file.filename)).pipe(r).on("error",t=>{console.error(t)}).on("data",t=>{let n={firstName:t.firstName.trim(),lastName:t.lastName.trim(),email:t.email.trim()};n.firstName!==""&&n.lastName!==""&&n.email!==""&&A.isEmail(n.email)&&e.push(n)}).on("end",()=>{d.bulkCreate(e).then(()=>{let t={status:"ok",filename:o.file.originalname,message:"Upload Successfully!"};s.json(t)}),u.emptyDirSync(m.join("uploads"))})}catch(e){u.emptyDirSync(m.join("uploads"));let r={status:"fail",filename:o.file.originalname,message:"Upload Error! message = "+e.message};s.json(r)}});a.post("/api/employees/sendmail",async(o,s)=>{let{subject:e,body:r,emails:t}=o.body;if(!e&&!r)return s.send("No subject and body");let n=t.join(","),j=I.createTransport({host:process.env.MT_HOST,port:process.env.MT_PORT,auth:{user:process.env.MT_USERNAME,pass:process.env.MT_PASSWORD}});try{await j.sendMail({from:process.env.MAIL_FROM,to:n,subject:"test email",html:`<div>
			<h1>${e}</h1>
			<p>${r}</p>
		</div>`}),s.send("successfully send email")}catch(y){console.log(y),s.send(y)}});R.exports=a});var f=require("express"),P=require("cors");process.env.NODE_ENV!=="production"&&require("dotenv").config();var $=p();$.sync().then(o=>console.log("Database connected!")).catch(o=>console.log(o));var l=f();l.use(P());l.use(f.json());l.use(f.urlencoded({extended:!1}));l.use("/api/employees",T());var F=process.env.PORT||3001;l.listen(F,()=>console.log("http://localhost:3001"));
